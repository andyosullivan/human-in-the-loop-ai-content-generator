"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
// lambda/reviewer.ts
const client_dynamodb_1 = require("@aws-sdk/client-dynamodb");
const TABLE_NAME = process.env.ITEMS_TABLE_NAME;
const REGION = process.env.AWS_REGION || "eu-west-1";
const ddb = new client_dynamodb_1.DynamoDBClient({ region: REGION });
const handler = async (event = {}) => {
    let body;
    try {
        body = typeof event.body === "string" ? JSON.parse(event.body) : event.body;
    }
    catch (err) {
        return { statusCode: 400, body: JSON.stringify({ error: "Invalid JSON body" }) };
    }
    const { itemId, version, status, reviewer, comment } = body || {};
    if (!itemId || !version || !status) {
        return { statusCode: 400, body: JSON.stringify({ error: "itemId, version, and status required" }) };
    }
    if (!["APPROVED", "REJECTED"].includes(status)) {
        return { statusCode: 400, body: JSON.stringify({ error: "Status must be APPROVED or REJECTED" }) };
    }
    try {
        await ddb.send(new client_dynamodb_1.UpdateItemCommand({
            TableName: TABLE_NAME,
            Key: {
                itemId: { S: itemId },
                version: { N: version.toString() }
            },
            UpdateExpression: "SET #status = :s, reviewer = :r, reviewComment = :c, reviewedAt = :t",
            ExpressionAttributeNames: { "#status": "status" },
            ExpressionAttributeValues: {
                ":s": { S: status },
                ":r": { S: reviewer || "unknown" },
                ":c": { S: comment || "" },
                ":t": { S: new Date().toISOString() }
            }
        }));
        return { statusCode: 200,
            headers: {
                "Access-Control-Allow-Origin": "*", // allow all domains
                "Access-Control-Allow-Headers": "*", // allow any headers
                "Access-Control-Allow-Methods": "OPTIONS,POST,GET" // allow these methods
            }, body: JSON.stringify({ ok: true, itemId, status }) };
    }
    catch (err) {
        console.error("Error updating item:", err);
        return {
            statusCode: 500,
            headers: {
                "Access-Control-Allow-Origin": "*", // allow all domains
                "Access-Control-Allow-Headers": "*", // allow any headers
                "Access-Control-Allow-Methods": "OPTIONS,POST,GET" // allow these methods
            },
            body: JSON.stringify({
                error: "DynamoDB update failed",
                detail: (err instanceof Error) ? err.message : JSON.stringify(err)
            })
        };
    }
};
exports.handler = handler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmV2aWV3ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJyZXZpZXdlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxxQkFBcUI7QUFDckIsOERBQTZFO0FBRTdFLE1BQU0sVUFBVSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0JBQWlCLENBQUM7QUFDakQsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLElBQUksV0FBVyxDQUFDO0FBRXJELE1BQU0sR0FBRyxHQUFHLElBQUksZ0NBQWMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO0FBRTVDLE1BQU0sT0FBTyxHQUFHLEtBQUssRUFBRSxRQUFhLEVBQUUsRUFBZ0IsRUFBRTtJQUMzRCxJQUFJLElBQUksQ0FBQztJQUNULElBQUksQ0FBQztRQUNELElBQUksR0FBRyxPQUFPLEtBQUssQ0FBQyxJQUFJLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQztJQUNoRixDQUFDO0lBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztRQUNYLE9BQU8sRUFBRSxVQUFVLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsS0FBSyxFQUFFLG1CQUFtQixFQUFFLENBQUMsRUFBRSxDQUFDO0lBQ3JGLENBQUM7SUFFRCxNQUFNLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxHQUFHLElBQUksSUFBSSxFQUFFLENBQUM7SUFDbEUsSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLE9BQU8sSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ2pDLE9BQU8sRUFBRSxVQUFVLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsS0FBSyxFQUFFLHNDQUFzQyxFQUFFLENBQUMsRUFBRSxDQUFDO0lBQ3hHLENBQUM7SUFDRCxJQUFJLENBQUMsQ0FBQyxVQUFVLEVBQUUsVUFBVSxDQUFDLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUM7UUFDN0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxLQUFLLEVBQUUscUNBQXFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7SUFDdkcsQ0FBQztJQUVELElBQUksQ0FBQztRQUNELE1BQU0sR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLG1DQUFpQixDQUFDO1lBQ2pDLFNBQVMsRUFBRSxVQUFVO1lBQ3JCLEdBQUcsRUFBRTtnQkFDRCxNQUFNLEVBQUUsRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUFFO2dCQUNyQixPQUFPLEVBQUUsRUFBRSxDQUFDLEVBQUUsT0FBTyxDQUFDLFFBQVEsRUFBRSxFQUFFO2FBQ3JDO1lBQ0QsZ0JBQWdCLEVBQUUsc0VBQXNFO1lBQ3hGLHdCQUF3QixFQUFFLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRTtZQUNqRCx5QkFBeUIsRUFBRTtnQkFDdkIsSUFBSSxFQUFFLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRTtnQkFDbkIsSUFBSSxFQUFFLEVBQUUsQ0FBQyxFQUFFLFFBQVEsSUFBSSxTQUFTLEVBQUU7Z0JBQ2xDLElBQUksRUFBRSxFQUFFLENBQUMsRUFBRSxPQUFPLElBQUksRUFBRSxFQUFFO2dCQUMxQixJQUFJLEVBQUUsRUFBRSxDQUFDLEVBQUUsSUFBSSxJQUFJLEVBQUUsQ0FBQyxXQUFXLEVBQUUsRUFBRTthQUN4QztTQUNKLENBQUMsQ0FBQyxDQUFDO1FBRUosT0FBTyxFQUFFLFVBQVUsRUFBRSxHQUFHO1lBQ3BCLE9BQU8sRUFBRTtnQkFDTCw2QkFBNkIsRUFBRSxHQUFHLEVBQUksb0JBQW9CO2dCQUMxRCw4QkFBOEIsRUFBRSxHQUFHLEVBQUcsb0JBQW9CO2dCQUMxRCw4QkFBOEIsRUFBRSxrQkFBa0IsQ0FBQyxzQkFBc0I7YUFDNUUsRUFBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQztJQUMvRCxDQUFDO0lBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztRQUNYLE9BQU8sQ0FBQyxLQUFLLENBQUMsc0JBQXNCLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDM0MsT0FBTztZQUNILFVBQVUsRUFBRSxHQUFHO1lBQ2YsT0FBTyxFQUFFO2dCQUNMLDZCQUE2QixFQUFFLEdBQUcsRUFBSSxvQkFBb0I7Z0JBQzFELDhCQUE4QixFQUFFLEdBQUcsRUFBRyxvQkFBb0I7Z0JBQzFELDhCQUE4QixFQUFFLGtCQUFrQixDQUFDLHNCQUFzQjthQUM1RTtZQUNELElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDO2dCQUNqQixLQUFLLEVBQUUsd0JBQXdCO2dCQUMvQixNQUFNLEVBQUUsQ0FBQyxHQUFHLFlBQVksS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDO2FBQ3JFLENBQUM7U0FDTCxDQUFDO0lBQ04sQ0FBQztBQUNMLENBQUMsQ0FBQztBQXREVyxRQUFBLE9BQU8sV0FzRGxCIiwic291cmNlc0NvbnRlbnQiOlsiLy8gbGFtYmRhL3Jldmlld2VyLnRzXG5pbXBvcnQgeyBEeW5hbW9EQkNsaWVudCwgVXBkYXRlSXRlbUNvbW1hbmQgfSBmcm9tIFwiQGF3cy1zZGsvY2xpZW50LWR5bmFtb2RiXCI7XG5cbmNvbnN0IFRBQkxFX05BTUUgPSBwcm9jZXNzLmVudi5JVEVNU19UQUJMRV9OQU1FITtcbmNvbnN0IFJFR0lPTiA9IHByb2Nlc3MuZW52LkFXU19SRUdJT04gfHwgXCJldS13ZXN0LTFcIjtcblxuY29uc3QgZGRiID0gbmV3IER5bmFtb0RCQ2xpZW50KHsgcmVnaW9uOiBSRUdJT04gfSk7XG5cbmV4cG9ydCBjb25zdCBoYW5kbGVyID0gYXN5bmMgKGV2ZW50OiBhbnkgPSB7fSk6IFByb21pc2U8YW55PiA9PiB7XG4gICAgbGV0IGJvZHk7XG4gICAgdHJ5IHtcbiAgICAgICAgYm9keSA9IHR5cGVvZiBldmVudC5ib2R5ID09PSBcInN0cmluZ1wiID8gSlNPTi5wYXJzZShldmVudC5ib2R5KSA6IGV2ZW50LmJvZHk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHJldHVybiB7IHN0YXR1c0NvZGU6IDQwMCwgYm9keTogSlNPTi5zdHJpbmdpZnkoeyBlcnJvcjogXCJJbnZhbGlkIEpTT04gYm9keVwiIH0pIH07XG4gICAgfVxuXG4gICAgY29uc3QgeyBpdGVtSWQsIHZlcnNpb24sIHN0YXR1cywgcmV2aWV3ZXIsIGNvbW1lbnQgfSA9IGJvZHkgfHwge307XG4gICAgaWYgKCFpdGVtSWQgfHwgIXZlcnNpb24gfHwgIXN0YXR1cykge1xuICAgICAgICByZXR1cm4geyBzdGF0dXNDb2RlOiA0MDAsIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsgZXJyb3I6IFwiaXRlbUlkLCB2ZXJzaW9uLCBhbmQgc3RhdHVzIHJlcXVpcmVkXCIgfSkgfTtcbiAgICB9XG4gICAgaWYgKCFbXCJBUFBST1ZFRFwiLCBcIlJFSkVDVEVEXCJdLmluY2x1ZGVzKHN0YXR1cykpIHtcbiAgICAgICAgcmV0dXJuIHsgc3RhdHVzQ29kZTogNDAwLCBib2R5OiBKU09OLnN0cmluZ2lmeSh7IGVycm9yOiBcIlN0YXR1cyBtdXN0IGJlIEFQUFJPVkVEIG9yIFJFSkVDVEVEXCIgfSkgfTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgICBhd2FpdCBkZGIuc2VuZChuZXcgVXBkYXRlSXRlbUNvbW1hbmQoe1xuICAgICAgICAgICAgVGFibGVOYW1lOiBUQUJMRV9OQU1FLFxuICAgICAgICAgICAgS2V5OiB7XG4gICAgICAgICAgICAgICAgaXRlbUlkOiB7IFM6IGl0ZW1JZCB9LFxuICAgICAgICAgICAgICAgIHZlcnNpb246IHsgTjogdmVyc2lvbi50b1N0cmluZygpIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBVcGRhdGVFeHByZXNzaW9uOiBcIlNFVCAjc3RhdHVzID0gOnMsIHJldmlld2VyID0gOnIsIHJldmlld0NvbW1lbnQgPSA6YywgcmV2aWV3ZWRBdCA9IDp0XCIsXG4gICAgICAgICAgICBFeHByZXNzaW9uQXR0cmlidXRlTmFtZXM6IHsgXCIjc3RhdHVzXCI6IFwic3RhdHVzXCIgfSxcbiAgICAgICAgICAgIEV4cHJlc3Npb25BdHRyaWJ1dGVWYWx1ZXM6IHtcbiAgICAgICAgICAgICAgICBcIjpzXCI6IHsgUzogc3RhdHVzIH0sXG4gICAgICAgICAgICAgICAgXCI6clwiOiB7IFM6IHJldmlld2VyIHx8IFwidW5rbm93blwiIH0sXG4gICAgICAgICAgICAgICAgXCI6Y1wiOiB7IFM6IGNvbW1lbnQgfHwgXCJcIiB9LFxuICAgICAgICAgICAgICAgIFwiOnRcIjogeyBTOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCkgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KSk7XG5cbiAgICAgICAgcmV0dXJuIHsgc3RhdHVzQ29kZTogMjAwLFxuICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgIFwiQWNjZXNzLUNvbnRyb2wtQWxsb3ctT3JpZ2luXCI6IFwiKlwiLCAgIC8vIGFsbG93IGFsbCBkb21haW5zXG4gICAgICAgICAgICAgICAgXCJBY2Nlc3MtQ29udHJvbC1BbGxvdy1IZWFkZXJzXCI6IFwiKlwiLCAgLy8gYWxsb3cgYW55IGhlYWRlcnNcbiAgICAgICAgICAgICAgICBcIkFjY2Vzcy1Db250cm9sLUFsbG93LU1ldGhvZHNcIjogXCJPUFRJT05TLFBPU1QsR0VUXCIgLy8gYWxsb3cgdGhlc2UgbWV0aG9kc1xuICAgICAgICAgICAgfSxib2R5OiBKU09OLnN0cmluZ2lmeSh7IG9rOiB0cnVlLCBpdGVtSWQsIHN0YXR1cyB9KSB9O1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgdXBkYXRpbmcgaXRlbTpcIiwgZXJyKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHN0YXR1c0NvZGU6IDUwMCxcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICBcIkFjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpblwiOiBcIipcIiwgICAvLyBhbGxvdyBhbGwgZG9tYWluc1xuICAgICAgICAgICAgICAgIFwiQWNjZXNzLUNvbnRyb2wtQWxsb3ctSGVhZGVyc1wiOiBcIipcIiwgIC8vIGFsbG93IGFueSBoZWFkZXJzXG4gICAgICAgICAgICAgICAgXCJBY2Nlc3MtQ29udHJvbC1BbGxvdy1NZXRob2RzXCI6IFwiT1BUSU9OUyxQT1NULEdFVFwiIC8vIGFsbG93IHRoZXNlIG1ldGhvZHNcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgICAgZXJyb3I6IFwiRHluYW1vREIgdXBkYXRlIGZhaWxlZFwiLFxuICAgICAgICAgICAgICAgIGRldGFpbDogKGVyciBpbnN0YW5jZW9mIEVycm9yKSA/IGVyci5tZXNzYWdlIDogSlNPTi5zdHJpbmdpZnkoZXJyKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfTtcbiAgICB9XG59O1xuIl19