"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
// lambda/listPending.ts
const client_dynamodb_1 = require("@aws-sdk/client-dynamodb");
const TABLE_NAME = process.env.ITEMS_TABLE_NAME;
const REGION = process.env.AWS_REGION || "eu-west-1";
const ddb = new client_dynamodb_1.DynamoDBClient({ region: REGION });
const handler = async () => {
    // GSI on status recommended for real apps. For now, use scan (ok for demo).
    const { Items } = await ddb.send(new client_dynamodb_1.QueryCommand({
        TableName: TABLE_NAME,
        IndexName: "StatusIndex", // Add this GSI if not present!
        KeyConditionExpression: "#s = :pending",
        ExpressionAttributeNames: { "#s": "status" },
        ExpressionAttributeValues: { ":pending": { S: "PENDING" } }
    }));
    const items = (Items || []).map(item => ({
        itemId: item.itemId.S,
        version: Number(item.version.N),
        type: item.type.S,
        status: item.status.S,
        lang: item.lang.S,
        createdAt: item.createdAt.S,
        spec: item.spec && item.spec.S ? JSON.parse(item.spec.S) : {}
    }));
    return { statusCode: 200,
        headers: {
            "Access-Control-Allow-Origin": "*", // allow all domains
            "Access-Control-Allow-Headers": "*", // allow any headers
            "Access-Control-Allow-Methods": "OPTIONS,POST,GET" // allow these methods
        }, body: JSON.stringify({ items }) };
};
exports.handler = handler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdFBlbmRpbmcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJsaXN0UGVuZGluZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSx3QkFBd0I7QUFDeEIsOERBQXdFO0FBRXhFLE1BQU0sVUFBVSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0JBQWlCLENBQUM7QUFDakQsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLElBQUksV0FBVyxDQUFDO0FBQ3JELE1BQU0sR0FBRyxHQUFHLElBQUksZ0NBQWMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO0FBRTVDLE1BQU0sT0FBTyxHQUFHLEtBQUssSUFBSSxFQUFFO0lBQzlCLDRFQUE0RTtJQUM1RSxNQUFNLEVBQUUsS0FBSyxFQUFFLEdBQUcsTUFBTSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksOEJBQVksQ0FBQztRQUM5QyxTQUFTLEVBQUUsVUFBVTtRQUNyQixTQUFTLEVBQUUsYUFBYSxFQUFFLCtCQUErQjtRQUN6RCxzQkFBc0IsRUFBRSxlQUFlO1FBQ3ZDLHdCQUF3QixFQUFFLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRTtRQUM1Qyx5QkFBeUIsRUFBRSxFQUFFLFVBQVUsRUFBRSxFQUFFLENBQUMsRUFBRSxTQUFTLEVBQUUsRUFBRTtLQUM5RCxDQUFDLENBQUMsQ0FBQztJQUNKLE1BQU0sS0FBSyxHQUFHLENBQUMsS0FBSyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDckMsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNyQixPQUFPLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQy9CLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDakIsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNyQixJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2pCLFNBQVMsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDM0IsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtLQUNoRSxDQUFDLENBQUMsQ0FBQztJQUNKLE9BQU8sRUFBRSxVQUFVLEVBQUUsR0FBRztRQUNwQixPQUFPLEVBQUU7WUFDTCw2QkFBNkIsRUFBRSxHQUFHLEVBQUksb0JBQW9CO1lBQzFELDhCQUE4QixFQUFFLEdBQUcsRUFBRyxvQkFBb0I7WUFDMUQsOEJBQThCLEVBQUUsa0JBQWtCLENBQUMsc0JBQXNCO1NBQzVFLEVBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLENBQUM7QUFDNUMsQ0FBQyxDQUFDO0FBeEJXLFFBQUEsT0FBTyxXQXdCbEIiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBsYW1iZGEvbGlzdFBlbmRpbmcudHNcbmltcG9ydCB7IER5bmFtb0RCQ2xpZW50LCBRdWVyeUNvbW1hbmQgfSBmcm9tIFwiQGF3cy1zZGsvY2xpZW50LWR5bmFtb2RiXCI7XG5cbmNvbnN0IFRBQkxFX05BTUUgPSBwcm9jZXNzLmVudi5JVEVNU19UQUJMRV9OQU1FITtcbmNvbnN0IFJFR0lPTiA9IHByb2Nlc3MuZW52LkFXU19SRUdJT04gfHwgXCJldS13ZXN0LTFcIjtcbmNvbnN0IGRkYiA9IG5ldyBEeW5hbW9EQkNsaWVudCh7IHJlZ2lvbjogUkVHSU9OIH0pO1xuXG5leHBvcnQgY29uc3QgaGFuZGxlciA9IGFzeW5jICgpID0+IHtcbiAgICAvLyBHU0kgb24gc3RhdHVzIHJlY29tbWVuZGVkIGZvciByZWFsIGFwcHMuIEZvciBub3csIHVzZSBzY2FuIChvayBmb3IgZGVtbykuXG4gICAgY29uc3QgeyBJdGVtcyB9ID0gYXdhaXQgZGRiLnNlbmQobmV3IFF1ZXJ5Q29tbWFuZCh7XG4gICAgICAgIFRhYmxlTmFtZTogVEFCTEVfTkFNRSxcbiAgICAgICAgSW5kZXhOYW1lOiBcIlN0YXR1c0luZGV4XCIsIC8vIEFkZCB0aGlzIEdTSSBpZiBub3QgcHJlc2VudCFcbiAgICAgICAgS2V5Q29uZGl0aW9uRXhwcmVzc2lvbjogXCIjcyA9IDpwZW5kaW5nXCIsXG4gICAgICAgIEV4cHJlc3Npb25BdHRyaWJ1dGVOYW1lczogeyBcIiNzXCI6IFwic3RhdHVzXCIgfSxcbiAgICAgICAgRXhwcmVzc2lvbkF0dHJpYnV0ZVZhbHVlczogeyBcIjpwZW5kaW5nXCI6IHsgUzogXCJQRU5ESU5HXCIgfSB9XG4gICAgfSkpO1xuICAgIGNvbnN0IGl0ZW1zID0gKEl0ZW1zIHx8IFtdKS5tYXAoaXRlbSA9PiAoe1xuICAgICAgICBpdGVtSWQ6IGl0ZW0uaXRlbUlkLlMsXG4gICAgICAgIHZlcnNpb246IE51bWJlcihpdGVtLnZlcnNpb24uTiksXG4gICAgICAgIHR5cGU6IGl0ZW0udHlwZS5TLFxuICAgICAgICBzdGF0dXM6IGl0ZW0uc3RhdHVzLlMsXG4gICAgICAgIGxhbmc6IGl0ZW0ubGFuZy5TLFxuICAgICAgICBjcmVhdGVkQXQ6IGl0ZW0uY3JlYXRlZEF0LlMsXG4gICAgICAgIHNwZWM6IGl0ZW0uc3BlYyAmJiBpdGVtLnNwZWMuUyA/IEpTT04ucGFyc2UoaXRlbS5zcGVjLlMpIDoge31cbiAgICB9KSk7XG4gICAgcmV0dXJuIHsgc3RhdHVzQ29kZTogMjAwLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICBcIkFjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpblwiOiBcIipcIiwgICAvLyBhbGxvdyBhbGwgZG9tYWluc1xuICAgICAgICAgICAgXCJBY2Nlc3MtQ29udHJvbC1BbGxvdy1IZWFkZXJzXCI6IFwiKlwiLCAgLy8gYWxsb3cgYW55IGhlYWRlcnNcbiAgICAgICAgICAgIFwiQWNjZXNzLUNvbnRyb2wtQWxsb3ctTWV0aG9kc1wiOiBcIk9QVElPTlMsUE9TVCxHRVRcIiAvLyBhbGxvdyB0aGVzZSBtZXRob2RzXG4gICAgICAgIH0sYm9keTogSlNPTi5zdHJpbmdpZnkoeyBpdGVtcyB9KSB9O1xufTtcbiJdfQ==